v2.0 raw
# This is an automatically-generated PIPS machine code file

# 0x0000: nop # first instr not execute
00000000 

# 0x0004: li $s0, TERMINAL
0a01ff10 

# 0x0008: li $s1, KB
0b01ff20 

# 0x000c: li $sp, STACK_TOP
0e01f800 

# 0x0010: lw $t0, 0($s1)     # read from keyboard
a6b10000 

# 0x0014: beq $t0, $zero, loop_top # if no input, then keep spin-waiting.
d6010010 

# 0x0018: sw $t0, 0($s0)     # write to terminal
c6a10000 

# 0x001c: li $s2, '+'        # load '+' operator for comparison
0c01002b 

# 0x0020: beq $t0, $s2, loop_top  # if the char is '+', then loop back without storing
d6c10010 

# 0x0024: li $s2, '\n'
0c01000a 

# 0x0028: beq $t0, $s2, compute_sum # if char is newline, start calculating sum.
d6c1003c 

# 0x002c: addi $t0, $t0, -48 # compute the number
0661ffd0 

# 0x0030: push $t0           # store into stack pointer pos
0ee1fffc c6e10000 

# 0x0038: j loop_top
f0010010 

# 0x003c: li $t3, STACK_TOP
0901f800 

# 0x0040: beq $t3, $sp, end  # if nothing is stored in the stack, end program.
d9e10070 

# 0x0044: pop $t1						 # pop stack to get the digit
a7e10000 0ee10004 

# 0x004c: pop $t2            # pop stack again to get next digit
a8e10000 0ee10004 

# 0x0054: add $a0, $t1, $t2  # add them up and store into argument for printing
02708000 

# 0x0058: jal print_number   # now we can print the sum
ff030074 

# 0x005c: li $t0, 10         # print a new line for next prompt
0601000a 

# 0x0060: sw $t0, 0($s0)     # output to terminal!
c6a10000 

# 0x0064: li $s0, TERMINAL
0a01ff10 

# 0x0068: li $s1, KB
0b01ff20 

# 0x006c: j loop_top         # afterwhich, we go back to loop_top to wait for input.
f0010010 

# 0x0070: j HALT
f001ff00 

# 0x0074: bne $a0, $zero, else
e2010088 

# 0x0078: nop
00000000 

# 0x007c: li $t0, 0x30
06010030 

# 0x0080: sw $t0, 0($s0)
c6a10000 

# 0x0084: j print_return #jump to return from print_num func
f00100d8 

# 0x0088: addi $sp, $sp, -12
0ee1fff4 

# 0x008c: sw $ra, 0($sp)
cfe10000 

# 0x0090: sw $a0, 4($sp)
c2e10004 

# 0x0094: li $a1, 10
0301000a 

# 0x0098: jal remainder
ff0300dc 

# 0x009c: addi $s1, $v0, 0
0b110000 

# 0x00a0: sw $s1, 8($sp)
cbe10008 

# 0x00a4: lw $a0, 4($sp)
a2e10004 

# 0x00a8: slt $t2, $s1, $a0 # t1 is digit, a0 is n
78b02000 

# 0x00ac: beq $t2, $zero, post_recursion
d80100c0 

# 0x00b0: li $a1, 10 # can be deleted later
0301000a 

# 0x00b4: jal quotient
ff0300f8 

# 0x00b8: addi $a0, $v0, 0
02110000 

# 0x00bc: jal print_number
ff030074 

# 0x00c0: lw $s1, 8($sp)
abe10008 

# 0x00c4: addi $t0, $s1, 0x30
06b10030 

# 0x00c8: sb $t0, 0($s0)
b6a10000 

# 0x00cc: lw $ra, 0($sp)
afe10000 

# 0x00d0: lw $a0, 4($sp)
a2e10004 

# 0x00d4: addi $sp, $sp, 12
0ee1000c 

# 0x00d8: jr $ra
f000f000 

# 0x00dc: slt $t0, $a0, $a1
76203000 

# 0x00e0: bne $t0, $zero, remainder_return
e60100f0 

# 0x00e4: sub $a0, $a0, $a1
12203000 

# 0x00e8: slt $t1, $a0, $a1
77203000 

# 0x00ec: beq $t1, $zero, remainder_while
d70100e4 

# 0x00f0: addi $v0, $a0, 0
01210000 

# 0x00f4: jr $ra
f000f000 

# 0x00f8: li $t2, 0
08010000 

# 0x00fc: slt $t0, $a0, $a1
76203000 

# 0x0100: bne $t0, $zero, quotient_return
e6010114 

# 0x0104: sub $a0, $a0, $a1
12203000 

# 0x0108: addi $t2, $t2, 1
08810001 

# 0x010c: slt $t1, $a0, $a1
77203000 

# 0x0110: beq $t1, $zero, quotient_while
d7010104 

# 0x0114: addi $v0, $t2, 0
01810000 

# 0x0118: jr $ra
f000f000 
